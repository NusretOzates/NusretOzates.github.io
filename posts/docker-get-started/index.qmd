---
title: "Things you need to know about Docker to get started"
author: "Nusret Ozates"
date: "2020-11-08"
categories: [devops, mlops, software]
image: "image.png"
---

Some useful commands and concepts to use Docker!

The original video that I take notes from :

{{< video https://youtu.be/fqMOX6JJhGo >}}

In this article, I‘ll talk about Docker. We will begin from why we need to use it, to how do we manage multiple Docker containers at the same time.

## Why do we need Docker?
We have web servers, database services, messaging services, etc. and all of them have their dependencies(libraries, OS version, etc.) and there can be a conflict between them. We call it “The matrix from Hell”.

![The matrix from Hell](matrix_hell.webp)

## What does docker do?
Run each component in a separate, isolated environment with its dependencies and its libraries. All within the same VM or host.

## What are the differences with VM?
VMs are complete isolation! They have their hardware, kernel, and OS. But docker containers use the same hardware and same Linux kernel.

<blockquote>
That is the reason why you can’t have a Windows container. You can say: “Hey! I have a docker on windows!”. Then I say, look for WSL. 😄

Containers meant to run a specific task or process, not meant to host an OS.
</blockquote>

![Virtual Machines vs Containers](vm_vs_docker.webp)

## Some Useful Docker Commands
1. docker version: It gives the docker version.
2. docker run: It is used to run a container from an image
    - docker run nginx ⇒ Runs instance of the Nginx application on the docker host
    - docker run -d nginx ⇒ Runs in the detached mode. That means the container will run in the background, and you can continue to use the terminal
    - docker run — name webapp nginx ⇒ Run a container with the given name
    - docker run -it nginx ⇒ “-i” gives stdin to docker, you can get input from the terminal. “-t” gives terminal so your dockerized app can print something
    - docker run -v /opt/datadir:/var/lib/mysql ….. ⇒ The container maps /var/lib/mysql(in docker) to /opt/datadir(in your pc). Your data will persist even when you delete the container.
    - docker run -p 80:5000 nginx ⇒ Forward your port 80 to container’s port 5000.

Note: You can’t bind the same host port to the multiple docker instances.

![](port_bind.webp)

3. docker ps: List all running containers and several key information about them. If used with the “-a” parameter, you can see previously stopped or exited containers.

4. docker stop: It stops the running containers. Needs container ID or name.

    * docker stop silly_sammet
5. docker rm: Removes stopped or exited container permanently. If it prints the name back, we are good.

    * docker rm silly_sammet
6. docker images: Gives a list of downloaded images and their sizes.

7. docker rmi: Removes the given image. You need to remove all dependent containers before.

    * docker rmi nginx
8. docker pull: Just downloads the images so you won’t wait when you want to run the image.

9. docker exec: Execute a command in the container.

    * docker exec distracted_meclintock(container name) cat /etc/host(command)
10. docker inspect: It returns all details of the container in JSON format.

    * docker inspect webapp
11. docker logs: This shows the logs of a container. It is useful when your container runs in detached mode

## Tags
For example “docker redis” command will run the latest Redis version for you. What if you want to use an older version of Redis?

docker run redis:4.0 bold part is the Tag of a container.

Where can I find tags of the docker image?

<https://hub.docker.com>

Environment Variables

In python we access an environment variable like this:

```py
os.environ.get(‘APP_COLOR’)
```
How can you set it in docker?

```bash
docker run -e APP_COLOR=pink web-app
```

How to create my own image?

Let’s say we have a webserver to run on an Ubuntu OS, what would be our steps to run it?

1. OS — Ubuntu
2. Update apt repo
3. Install dependencies using apt
4. Install Python dependencies using pip
5. Copy source code to ex. /opt folder
6. Run web server using ex. “flask” command

Then we need to do these steps in a file called Dockerfile.

```dockerfile
FROM Ubuntu  
RUN apt-get update 
RUN apt-get install python  
RUN pip install flask 
RUN pip install flask-mysql  
COPY . /opt/source-code  
ENTRYPOINT FLASK_APP = /opt/source-code/app.py flask run
```

Let’s build our Dockerfile and have a docker image!

```bash
docker build -t nusret/chatbot "Address of the dockerfile without double quote"
```

And push it to the DockerHub if you want

```bash
docker push nusret/chatbot
```

## What is this Dockerfile?

![](dockerfile1.webp)

Dockerfile is a text file written in a specific format that docker can understand.

![](dockerfile2.webp)

## How can I export/import my docker image as a tar file?
You can export your Docker Image as a .tar file with this command:

```bash
docker save —output chatbot.tar nusret/chatbot
```

And you can easily import it with a very similar command.
```bash
docker load —input chatbot.tar
```
## ENTRYPOINT VS CMD
Let’s say we have a docker container that just “sleeps” named “sleeper”. The docker file would be like this:

```dockerfile
FROM Ubuntu  
CMD ["sleep","5"]
```

When I run the command:

```bash
docker run sleeper sleep 10
```
This CMD command will get replaced with sleep 10. But as this is a sleeper container, I could only say “10” and the container must sleep. To do this we change the dockerfile like this:
```dockerfile
FROM Ubuntu  
ENTRYPOINT ["sleep"]
```

This time when I run:
```bash
docker run sleeper 10
```
The “10” will be appended to the “sleep” command and I can just set the sleep time. But what if I don’t write any number? How can I add a default sleep time?

```dockerfile
FROM Ubuntu  
ENTRYPOINT ["sleep"]
CMD ["5"]
```