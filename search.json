[
  {
    "objectID": "posts/test_time_compute/index.html",
    "href": "posts/test_time_compute/index.html",
    "title": "Test-Time Compute, Reasoning and Human Brain",
    "section": "",
    "text": "I have lots of things to do, but I‚Äôve suddenly been struck by inspiration, and since the well-known work-avoidance mechanism has kicked in, I‚Äôm going to write down my thoughts on test-time compute, shared decoders, and reasoning. Here we go, a theoretical and lengthy piece is coming.\nOne of the things I love about LLMs is that they handle multiple tasks with a single loss and a single branch. That is, instead of a shared encoder + separate decoders for each task like in U-net models, there‚Äôs just a transformer decoder. As far as I know, this comes from T5 models where we model all NLP tasks as text-to-text. We‚Äôll get back to LLMs in a bit, but let‚Äôs take a look at the vision side for now.\nI don‚Äôt think there‚Äôs an equivalent of this in vision, for example, how would you combine segmentation and classification tasks? At the very least, the last layers would have to be different. However, there‚Äôs a model that comes very, very close to combining these, and the model‚Äôs developers are inspired by the human brain. The model is called BU-TD. Let‚Äôs start with the inspiration part. These folks are saying, ‚Äòsegmenting anything and everything at once‚Äô is not the right approach; the human brain doesn‚Äôt work that way.\nFor example, the longer you look at the image above, the more details emerge; the brain doesn‚Äôt grasp the entire image with all its details at once. So why are we trying to make models do this? This is where BU-TD comes into play.\nAgain, in this model inspired by the human brain, first an encoder processes the image, and the decoder takes the vector coming from the encoder and additionally receives a task and argument vector. For example,\nWe tell the model to look at the image, task: find hairstyle, argument: bob. Afterwards, the decoder can optionally output the segmentation of Bob‚Äôs hair, but it may not; that part is a bit vague. By feeding the decoder‚Äôs result back into the encoder, we get the result corresponding to that style, and so on.\nThe nice thing about this system is that it first uses the weights in the decoder to the fullest, making it a parameter-efficient model. Secondly, since each task, argument, etc., is decoupled, the system learns concepts better. For example, during training, brother Bob is always bald, so Bob‚Äôs hairstyle value is always bald during training. However, since the model learns what short hair and long hair are from other examples independently of the person, it can detect this during testing if Bob comes to Turkey and gets hair implants. Thanks to this, the model learns much better with much less data.\nNow we come back to LLMs. We are actually applying the TD part of this model, that is, using a single decoder for each task, in LLMs since the T5 models, especially in PrefixLM models, and when image tokens and (I think) the question are processed with self-attention, the TD logic is formed.\nThe second part is that when people look at a picture, we extract the details, relationships, etc. over time; all the details don‚Äôt come at a single glance, right? Well, this part actually corresponds to the concept we call test-time compute. For example, as we look at the image on the left below, the details on the right emerge.\nBased on what we‚Äôve learned up to this point, trying to process everything at once is not logical. Learning the relationships one by one during training and processing the image over time using more compute/time during testing is an effective solution in terms of both the number of parameters and learning more with less data. Our next problem is this: We don‚Äôt want to process the image all at once, okay, but we also don‚Äôt want to process the entire image; we want to process as much as necessary for the information we are interested in to save time and money. This is where reasoning comes into play. What does a good LLM model do in terms of reasoning? It divides the question we ask into the necessary parts and solves the parts step by step, and stops when it reaches the result. By doing this, we have the following system:\nI‚Äôm saying that if I were shown a picture and asked, ‚ÄòWhat is the size of the bag of the woman holding the bag that the girl is looking at?‚Äô, my brain would process the image in a similar way and wouldn‚Äôt look for more details.\nI think the BU-TD model itself is very limited in terms of input and output ranges but the main idea is still strong and I believe VLMs are very close to implementing this idea into the AI models.\nThat‚Äôs it, I couldn‚Äôt come to a conclusion with the text. These things suddenly came to my mind while reading a very unrelated article, I thought I‚Äôd write them down. Good luck and thanks for reading up to this point!"
  },
  {
    "objectID": "posts/test_time_compute/index.html#references",
    "href": "posts/test_time_compute/index.html#references",
    "title": "Test-Time Compute, Reasoning and Human Brain",
    "section": "References",
    "text": "References\n\nBU-TD Model: ‚ÄúImage interpretation by iterative bottom-up top-down processing‚Äù\nT5 Model: ‚ÄúExploring the Limits of Transfer Learning with a Unified Text-to-Text Transformer‚Äù"
  },
  {
    "objectID": "myposts.html",
    "href": "myposts.html",
    "title": "Welcome to My Posts",
    "section": "",
    "text": "Test-Time Compute, Reasoning and Human Brain\n\n\n\nml\n\nllm\n\n\n\n\n\n\n\n\n\nFeb 7, 2025\n\n\nNusret Ozates\n\n\n\n\n\n\n\n\n\n\n\n\nThings you need to know about Docker to get started\n\n\n\ndevops\n\nmlops\n\nsoftware\n\n\n\n\n\n\n\n\n\nNov 8, 2020\n\n\nNusret Ozates\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog\n\n\n\n\n\nSome quick example text to build on the card title and make up the bulk of the card‚Äôs content.\n\n\n\n\n\n\n\nSome quick example text to build on the card title and make up the bulk of the card‚Äôs content.\n\n\n\n\n\n\n\nSome quick example text to build on the card title and make up the bulk of the card‚Äôs content.\n\n\n\n\n\n  \n  \n    Some quick example text to build on the card title and make up the bulk of the card's content."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Hi Everyone!",
    "section": "",
    "text": "As a Machine Learning Engineer, I build and refine end-to-end ML systems, handling tasks from data collection to model deployment on cloud platforms, with a focus on practical, scalable solutions. I have 4 years of experience in Natural Language Processing, designing user-centric chatbots, developing recommendation algorithms, and creating analytics dashboards.\nI am also skilled in MLOps, using tools such as Kubeflow, FastAPI, and Transformers to automate and optimise the ML lifecycle. Previously, I worked as an MLOps Engineer and a Senior Machine Learning Engineer at GLOSA and Carbon Consulting, respectively, where I implemented an AutoNLP platform and led the development team of the AI department.\nI hold a Master of Science in Computer Science from Koc University and several certifications, such as Google Cloud Certified Professional Machine Learning Engineer and Certified Spark NLP Data Scientist. I am passionate about applying AI to enhance user experience and support data-driven decision-making across company services."
  },
  {
    "objectID": "posts/docker-get-started/index.html",
    "href": "posts/docker-get-started/index.html",
    "title": "Things you need to know about Docker to get started",
    "section": "",
    "text": "Some useful commands and concepts to use Docker!\nThe original video that I take notes from :\nIn this article, I‚Äòll talk about Docker. We will begin from why we need to use it, to how do we manage multiple Docker containers at the same time."
  },
  {
    "objectID": "posts/docker-get-started/index.html#why-do-we-need-docker",
    "href": "posts/docker-get-started/index.html#why-do-we-need-docker",
    "title": "Things you need to know about Docker to get started",
    "section": "Why do we need Docker?",
    "text": "Why do we need Docker?\nWe have web servers, database services, messaging services, etc. and all of them have their dependencies(libraries, OS version, etc.) and there can be a conflict between them. We call it ‚ÄúThe matrix from Hell‚Äù.\n\n\n\nThe matrix from Hell"
  },
  {
    "objectID": "posts/docker-get-started/index.html#what-does-docker-do",
    "href": "posts/docker-get-started/index.html#what-does-docker-do",
    "title": "Things you need to know about Docker to get started",
    "section": "What does docker do?",
    "text": "What does docker do?\nRun each component in a separate, isolated environment with its dependencies and its libraries. All within the same VM or host."
  },
  {
    "objectID": "posts/docker-get-started/index.html#what-are-the-differences-with-vm",
    "href": "posts/docker-get-started/index.html#what-are-the-differences-with-vm",
    "title": "Things you need to know about Docker to get started",
    "section": "What are the differences with VM?",
    "text": "What are the differences with VM?\nVMs are complete isolation! They have their hardware, kernel, and OS. But docker containers use the same hardware and same Linux kernel.\n\nThat is the reason why you can‚Äôt have a Windows container. You can say: ‚ÄúHey! I have a docker on windows!‚Äù. Then I say, look for WSL. üòÑ\nContainers meant to run a specific task or process, not meant to host an OS.\n\n\n\n\nVirtual Machines vs Containers"
  },
  {
    "objectID": "posts/docker-get-started/index.html#some-useful-docker-commands",
    "href": "posts/docker-get-started/index.html#some-useful-docker-commands",
    "title": "Things you need to know about Docker to get started",
    "section": "Some Useful Docker Commands",
    "text": "Some Useful Docker Commands\n\ndocker version: It gives the docker version.\ndocker run: It is used to run a container from an image\n\ndocker run nginx ‚áí Runs instance of the Nginx application on the docker host\ndocker run -d nginx ‚áí Runs in the detached mode. That means the container will run in the background, and you can continue to use the terminal\ndocker run ‚Äî name webapp nginx ‚áí Run a container with the given name\ndocker run -it nginx ‚áí ‚Äú-i‚Äù gives stdin to docker, you can get input from the terminal. ‚Äú-t‚Äù gives terminal so your dockerized app can print something\ndocker run -v /opt/datadir:/var/lib/mysql ‚Ä¶.. ‚áí The container maps /var/lib/mysql(in docker) to /opt/datadir(in your pc). Your data will persist even when you delete the container.\ndocker run -p 80:5000 nginx ‚áí Forward your port 80 to container‚Äôs port 5000.\n\n\nNote: You can‚Äôt bind the same host port to the multiple docker instances.\n\n\ndocker ps: List all running containers and several key information about them. If used with the ‚Äú-a‚Äù parameter, you can see previously stopped or exited containers.\ndocker stop: It stops the running containers. Needs container ID or name.\n\ndocker stop silly_sammet\n\ndocker rm: Removes stopped or exited container permanently. If it prints the name back, we are good.\n\ndocker rm silly_sammet\n\ndocker images: Gives a list of downloaded images and their sizes.\ndocker rmi: Removes the given image. You need to remove all dependent containers before.\n\ndocker rmi nginx\n\ndocker pull: Just downloads the images so you won‚Äôt wait when you want to run the image.\ndocker exec: Execute a command in the container.\n\ndocker exec distracted_meclintock(container name) cat /etc/host(command)\n\ndocker inspect: It returns all details of the container in JSON format.\n\ndocker inspect webapp\n\ndocker logs: This shows the logs of a container. It is useful when your container runs in detached mode"
  },
  {
    "objectID": "posts/docker-get-started/index.html#tags",
    "href": "posts/docker-get-started/index.html#tags",
    "title": "Things you need to know about Docker to get started",
    "section": "Tags",
    "text": "Tags\nFor example ‚Äúdocker redis‚Äù command will run the latest Redis version for you. What if you want to use an older version of Redis?\ndocker run redis:4.0 bold part is the Tag of a container.\nWhere can I find tags of the docker image?\nhttps://hub.docker.com\nEnvironment Variables\nIn python we access an environment variable like this:\nos.environ.get(‚ÄòAPP_COLOR‚Äô)\nHow can you set it in docker?\ndocker run -e APP_COLOR=pink web-app\nHow to create my own image?\nLet‚Äôs say we have a webserver to run on an Ubuntu OS, what would be our steps to run it?\n\nOS ‚Äî Ubuntu\nUpdate apt repo\nInstall dependencies using apt\nInstall Python dependencies using pip\nCopy source code to ex. /opt folder\nRun web server using ex. ‚Äúflask‚Äù command\n\nThen we need to do these steps in a file called Dockerfile.\nFROM Ubuntu  \nRUN apt-get update \nRUN apt-get install python  \nRUN pip install flask \nRUN pip install flask-mysql  \nCOPY . /opt/source-code  \nENTRYPOINT FLASK_APP = /opt/source-code/app.py flask run\nLet‚Äôs build our Dockerfile and have a docker image!\ndocker build -t nusret/chatbot \"Address of the dockerfile without double quote\"\nAnd push it to the DockerHub if you want\ndocker push nusret/chatbot"
  },
  {
    "objectID": "posts/docker-get-started/index.html#what-is-this-dockerfile",
    "href": "posts/docker-get-started/index.html#what-is-this-dockerfile",
    "title": "Things you need to know about Docker to get started",
    "section": "What is this Dockerfile?",
    "text": "What is this Dockerfile?\n\nDockerfile is a text file written in a specific format that docker can understand."
  },
  {
    "objectID": "posts/docker-get-started/index.html#how-can-i-exportimport-my-docker-image-as-a-tar-file",
    "href": "posts/docker-get-started/index.html#how-can-i-exportimport-my-docker-image-as-a-tar-file",
    "title": "Things you need to know about Docker to get started",
    "section": "How can I export/import my docker image as a tar file?",
    "text": "How can I export/import my docker image as a tar file?\nYou can export your Docker Image as a .tar file with this command:\ndocker save ‚Äîoutput chatbot.tar nusret/chatbot\nAnd you can easily import it with a very similar command.\ndocker load ‚Äîinput chatbot.tar"
  },
  {
    "objectID": "posts/docker-get-started/index.html#entrypoint-vs-cmd",
    "href": "posts/docker-get-started/index.html#entrypoint-vs-cmd",
    "title": "Things you need to know about Docker to get started",
    "section": "ENTRYPOINT VS CMD",
    "text": "ENTRYPOINT VS CMD\nLet‚Äôs say we have a docker container that just ‚Äúsleeps‚Äù named ‚Äúsleeper‚Äù. The docker file would be like this:\nFROM Ubuntu  \nCMD [\"sleep\",\"5\"]\nWhen I run the command:\ndocker run sleeper sleep 10\nThis CMD command will get replaced with sleep 10. But as this is a sleeper container, I could only say ‚Äú10‚Äù and the container must sleep. To do this we change the dockerfile like this:\nFROM Ubuntu  \nENTRYPOINT [\"sleep\"]\nThis time when I run:\ndocker run sleeper 10\nThe ‚Äú10‚Äù will be appended to the ‚Äúsleep‚Äù command and I can just set the sleep time. But what if I don‚Äôt write any number? How can I add a default sleep time?\nFROM Ubuntu  \nENTRYPOINT [\"sleep\"]\nCMD [\"5\"]"
  }
]